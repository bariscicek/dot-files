#!/bin/sh
DOCKER_COMPOSE_DIR=/home/baris/Codes/plutus/docker-compose-dev/

pushd $DOCKER_COMPOSE_DIR
git -C $DOCKER_COMPOSE_DIR checkout master
git -C $DOCKER_COMPOSE_DIR pull

ARGUMENTS=$@

find_in_array() {
   local n=$#
   local value=${!n}
   for ((i=1;i < $#; i++)) {
      if [ "${!i}" == "${value}" ]; then
         return $i
      fi
   }

   return -1
}

remote_from_array() {
  local ret=""
  local n=$#
  local value=${!n}
  for ((i=1; i < $#; i++)) {
    if [ "${!i}" != "${value}" ]; then
      ret="$ret${!i} "
    fi
  }
  echo $ret
}

if [ "$1" == "update" ]; then
  if [ "$2" == "--master" ]; then
    ./pull.sh --master
  else
    ./pull.sh
  fi
  exit
fi

if [ "$1" == "list" ]; then
    docker ps  --format '{{printf "%40s" .Names}}{{printf "%60v" .Ports}}' | sort -k 2
    exit
fi

if [ "$1" == "clean" ]; then
   docker volume rm $(docker volume ls -qf dangling=true)
   docker rmi $(docker images | grep '^<none>' | awk '{print $3}') 
   exit
fi

# move the -d at the end for logs
find_in_array $ARGUMENTS "-d"
ret=$?
if [ "$ret" -ne "255" ]; then
   # if -d added at the end move it back 
   if [ "$ret" -ne "2" ]; then
      ret=$(remote_from_array $ARGUMENTS "-d")
      ret_array=($ret)
      ARGUMENTS="${@:1:1} -d ${ret_array[@]:1}"
   fi
else
   if [ "$1" == "up" ]; then
      ARGUMENTS="${@:1:1} -d ${@:2}"
   fi
fi

# move the -f at the end for logs
find_in_array $ARGUMENTS "-f"
ret=$?
if [ "$ret" -ne "255" ]; then
   # if -f added at the end move it back 
   if [ "$ret" -ne "2" ]; then
      ret=$(remote_from_array $ARGUMENTS "-f")
      ret_array=($ret)
      ARGUMENTS="${@:1:1} -f ${ret_array[@]:1}"
   fi
else
   if [ "$1" == "logs" ]; then
      ARGUMENTS="${@:1:1} -f ${@:2}"
   fi
fi

env /usr/local/bin/docker-compose $ARGUMENTS
if [ "$1" == "up" ] && [ "$2" == "" ]; then
  /usr/local/bin/docker-compose stop clamav
fi
popd
